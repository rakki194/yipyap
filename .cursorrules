# The `yipyap` Manifesto

---

The frontend of yipyap is built with SolidJS, a reactive JavaScript framework that emphasizes fine-grained reactivity and performance, using Vite as the build tool for fast development and optimized production builds. The application follows a component-based architecture with a central app context managing global state. The main entry point is `/src/main.tsx`, which sets up routing and the app context, while the core application logic resides in `/src/contexts/app.tsx`.

Components are organized in feature-based directories under `/src/components`, each with its own CSS module for styling and `__tests__` directory for component-specific tests. Global styles are defined in `/src/styles.css`, while theme-specific styles are in `/src/themes.css`. The application uses CSS custom properties extensively for theming and maintains a consistent visual hierarchy through shared spacing and color variables.

The backend integration is handled through a well-defined API interface, with endpoints for file operations, metadata management, and caption generation. The frontend communicates with these endpoints using typed fetch requests, with proper error handling and loading states. The API interface is defined in TypeScript types shared between the frontend and backend, ensuring type safety across the full stack.

The application includes a comprehensive error handling system with a global error boundary and component-level error states. Errors are displayed through a notification system that supports different severity levels (error, warning, info, success) and can be configured for automatic dismissal. Loading states are managed through SolidJS's resource system, providing a consistent loading experience across the application.

The application's state management is handled through a combination of SolidJS's fine-grained reactivity system and context providers. The app context (`/src/contexts/app.tsx`) manages global settings and theme state, while feature-specific contexts (like the gallery context) handle domain-specific state. All state changes are properly typed and can be persisted to localStorage when appropriate.

## The Gallery System

The gallery system is the heart of the application, featuring a sophisticated image viewer with advanced features for image display, navigation, and metadata management. The system is built around several key components:

### Image Viewer Core (`ImageView` Component)

The Image Viewer Core component offers a rich user experience by combining smooth zooming, advanced panning, and intuitive minimap navigation. It features smooth zooming characterized by gradual transitions with a 0.001 zoom factor for precision, cursor-relative zooming to maintain focus, smoothly interpolated scale limits between 1x and 5x, and a double-click reset function with a zoom level indicator. Additionally, its advanced panning provides cursor-aware movement when zoomed, employing smooth cubic-bezier transitions, distinct grab/grabbing states, edge detection to prevent over-panning, and hardware-accelerated transforms for optimal performance. The minimap navigation enhances usability with real-time viewport tracking, interactive navigation via clicking, seamless viewport updates, and theme-aware styling through a semi-transparent overlay that shows or hides based on the zoom state and is configurable via the 'enableMinimap' setting.

### Image Loading and Display

The Image Loading and Display strategy employs progressive loading where a thumbnail is displayed immediately while the full preview loads with smooth opacity transitions. This approach is supported by a priority-based loading system, automatic resource cleanup, and clear loading state indicators. In addition, performance is optimized through hardware-accelerated transforms, the use of will-change hints for smooth animations, efficient resize handling via ResizeObserver, memory-conscious image unloading, and effective touch action handling on mobile devices.

### Tagging System

The tagging system includes advanced color generation using the OKLCH color space to achieve perceptually uniform colors. It is theme-aware and applies specific rules for each theme: in the dark theme, it uses a low lightness of about 25% with subtle chroma; in the light theme, a high lightness near 85% with subtle chroma; and in the gray theme, variable lightness with zero chroma is applied. Additionally, it supports pre-defined themed variants along with accessibility modes such as 'high-contrast-black' and 'high-contrast-inverse', ensuring high contrast and readability. The system deterministically generates tag colors and automatically adjusts contrast for text readability.

Interactive tag management supports keyboard navigation for moving between tags, double-tap detection for quick editing, smooth animations for tag creation and deletion, batch operations, theme-specific animations and hover effects, and RTL language support.

### Caption Generation

The Caption Generation feature supports multiple models, including JTP2 and WDv3, and offers progress tracking through notifications, robust error handling with user feedback, automatic detection of caption types, and ensures real-time updates.

### Accessibility and UX

The Accessibility and UX guidelines ensure that the application is fully navigable via keyboard, with accessible controls featuring ARIA labels, proper focus management, and support for screen readers. Additionally, the interface provides visual feedback through loading indicators, progress notifications, clear error states, theme-aware animations, and high contrast options.

### Theme Integration

The Theme Integration approach includes comprehensive theming that covers theme-specific tag colors and animations, support for both dark and light modes, special theme variants with unique effects, consistent styling across components, dynamic theme switching, and support for right-to-left layouts.

## Theming System

For detailed information about the theming system, including theme variables, style changes, and best practices, please refer to the [Theming Documentation](docs/theming.md) when writing CSS.

Maintain consistency with existing code by following established naming conventions and reusing components and styles where appropriate. When writing CSS, ensure compatibility with the global styles defined in `/src/styles.css`.

Theme specific styles are in the `/src/themes.css` file.

There is no `App.tsx` file, do not create it, the root component is in the `/src/main.tsx` file, `/src/contexts/app.tsx` is the app context which is the global state of the app.

Think step-by-step and write code that is easy to understand and maintain.

## Translation System

For detailed information about the translation system, including type definitions, language support, and best practices, please refer to the [Translation Documentation](docs/translations.md).

## Making Style Changes

For detailed information about making style changes to the application, please refer to the [Theming Documentation](docs/theming.md).

For guidelines on using backdrop filters in the application, including best practices, please refer to the [Backdrop Filter Documentation](docs/backdrop-filter.md).

For information about implementing smooth transitions for overlay elements like modals and popovers, please refer to the [Overlay Transitions Documentation](docs/overlay-transitions.md).

## Writing Tests

For documentation about writing tests, including test environment setup, patterns, and best practices, please refer to the [Testing Documentation](docs/testing.md).

## Notifications

For detailed information about the notification system, including architecture, usage, features, and best practices, please refer to the [Notifications Documentation](docs/notifications.md).

## Common TypeScript Linting Errors and Solutions

For information about common TypeScript linting errors and their solutions, please refer to the [Linting Documentation](docs/linting.md).

## Select Element Labeling

For detailed information about ARIA labeling best practices and accessibility requirements, please refer to the [ARIA Labeling Guide](docs/aria-labels.md).

## Adding New Settings

For detailed information about adding new settings to the application, including step-by-step instructions and best practices, please refer to the [Settings Documentation](docs/settings.md).

## Reading and Writing Documentation

Always read the whole documentation on the related topic before writing code.

Instead of using lists while writing documentation, use paragraphs. Only use lists when listing files and do not include the file size in the list.

## Composables in SolidJS

Composables in SolidJS encapsulate reusable reactive logic and must reside in the `/src/composables` directory with names prefixed by "use" to clearly denote their function. It is imperative not to create a "hooks" directory or use the term "hooks," as that is more aligned with React. Each composable should have a single, clear responsibility, return only the necessary reactive primitives, properly handle resource cleanup, be well-typed in TypeScript, and come with comprehensive documentation and usage examples.

## Event Handling and Performance

The application prioritizes performance in event handling, particularly for scroll and touch interactions. A key optimization is the use of passive event listeners, which significantly improve scrolling performance by allowing the browser to immediately begin scrolling operations without waiting for JavaScript execution.

For detailed information about implementing passive event listeners, including best practices, browser support, and common pitfalls, please refer to the [Passive Event Listeners Documentation](docs/passive-events.md).

When implementing event handlers in the application, particularly in composables and components that handle scroll or touch events, ensure proper usage of passive event listeners according to the documentation guidelines. This is especially important for the gallery system's smooth scrolling and touch interaction features.
